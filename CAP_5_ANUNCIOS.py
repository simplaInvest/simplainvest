import streamlit as st
import pandas as pd
import altair as alt
import plotly.express as px
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import plotly.graph_objects as go

from libs.data_loader import K_CENTRAL_CAPTURA, K_CENTRAL_PRE_MATRICULA, K_CENTRAL_VENDAS, K_PTRAFEGO_DADOS, get_df

# Carregar informa√ß√µes sobre lan√ßamento selecionado
PRODUTO = st.session_state["PRODUTO"]
VERSAO_PRINCIPAL = st.session_state["VERSAO_PRINCIPAL"]

# Carregar DataFrames para lan√ßamento selecionado
loading_container = st.empty()
with loading_container:
    status = st.status("Carregando dados...", expanded=True)
    with status:
        df_captura = get_df(PRODUTO, VERSAO_PRINCIPAL, K_CENTRAL_CAPTURA)
        df_prematricula = get_df(PRODUTO, VERSAO_PRINCIPAL, K_CENTRAL_PRE_MATRICULA)
        df_vendas = get_df(PRODUTO, VERSAO_PRINCIPAL, K_CENTRAL_VENDAS)
        df_ptrafego_dados = get_df(PRODUTO, VERSAO_PRINCIPAL, K_PTRAFEGO_DADOS)
        status.update(label="Carregados com sucesso!", state="complete", expanded=False)
loading_container.empty()

if 'Captacao' not in st.session_state:
    Cap = []
    st.write('Lista de Capta√ß√£o vazia')
else:
    Cap = st.session_state['Captacao']

#------------------------------------------------------------
#      IN√çCIO DO LAYOUT
#------------------------------------------------------------

st.caption("CAPTA√á√ÉO >  AN√öNCIOS")
st.title('An√∫ncios')

# Filtrar apenas os leads vindos de tr√°fego pago
df_captura_pago = df_captura[df_captura["UTM_MEDIUM"] == "pago"]


# Criar dummies para pr√©-matr√≠cula e vendas
if df_prematricula is not None:
    df_captura_pago["PREMATRICULA"] = df_captura_pago["EMAIL"].isin(df_prematricula["EMAIL"]).astype(int)
else:
    df_captura_pago["PREMATRICULA"] = 0

if df_vendas is not None:
    df_captura_pago["VENDA"] = df_captura_pago["EMAIL"].isin(df_vendas["EMAIL"]).astype(int)
else:
    df_captura_pago["VENDA"] = 0

# Contar leads, pr√©-matr√≠culas e vendas por an√∫ncio
ranking_leads = df_captura_pago.groupby("UTM_TERM").agg(
    Leads_Capturados=("EMAIL", "count"),
    Prematriculas=("PREMATRICULA", "sum"),
    Vendas=("VENDA", "sum")
).reset_index()

# Renomear coluna de an√∫ncios
ranking_leads = ranking_leads.rename(columns={"UTM_TERM": "An√∫ncio"})

# Ordenar do maior para o menor em n√∫mero de leads capturados
ranking_leads = ranking_leads.sort_values(by="Leads_Capturados", ascending=False)

# Evitar divis√£o por zero
ranking_leads["Taxa de Convers√£o"] = ranking_leads.apply(
    lambda row: row["Vendas"] / row["Leads_Capturados"] if row["Leads_Capturados"] > 0 else 0, axis=1
)

# Formatar como porcentagem
ranking_leads["Taxa de Convers√£o"] = ranking_leads["Taxa de Convers√£o"] * 100  # Convertendo para %


cols = st.columns(2)

with cols[0]:
    # Exibir a tabela no Streamlit
    st.write("### üîù Ranking dos Melhores An√∫ncios")
    st.dataframe(ranking_leads, hide_index = True)

with cols[1]:
    # Filtrar os top 10 an√∫ncios com mais vendas
    top_10_vendas = ranking_leads.sort_values(by="Vendas", ascending=False).head(10)

    # Criar gr√°fico de pizza usando Plotly
    fig_pizza = px.pie(
        top_10_vendas,
        names="An√∫ncio",
        values="Vendas",
        title="üçï Top 10 An√∫ncios",
        labels={"Vendas": "Vendas"},
        hole=0.4  # Criar um gr√°fico de rosca
    )

    # Exibir gr√°fico no Streamlit
    st.plotly_chart(fig_pizza, use_container_width=True)

threshold = st.number_input("Digite um n√∫mero:", min_value=0, max_value=1000, value=100)

# Criar gr√°fico de dispers√£o usando Plotly sem r√≥tulos sobre os pontos e sem varia√ß√£o de tamanho
fig = px.scatter(
    ranking_leads[ranking_leads["Leads_Capturados"] >= threshold],
    x="Leads_Capturados",
    y="Taxa de Convers√£o",
    color="Taxa de Convers√£o",
    hover_name="An√∫ncio",
    title="üéØ Leads Capturados vs. Taxa de Convers√£o",
    labels={"Leads_Capturados": "Leads Capturados", "Taxa de Convers√£o": "Taxa de Convers√£o (%)"},
)

# Ajustar layout: definir tamanho fixo dos pontos e remover r√≥tulos sobre os pontos
fig.update_traces(marker=dict(size=8))  # Define tamanho fixo dos pontos

fig.update_layout(
    xaxis=dict(title="Leads Capturados"),
    yaxis=dict(title="Taxa de Convers√£o (%)"),
    showlegend=False
)

# Exibir gr√°fico no Streamlit
st.plotly_chart(fig, use_container_width=True)

st.divider()

###########################################################
#
#               Scatterplot previsto
#
###########################################################

# proxy_vendas = pd.read_csv("proxy_vendas.csv", index_col = 0)

# # Filtrar apenas leads vindos de tr√°fego pago
# df_ptrafego_dados = df_ptrafego_dados[df_ptrafego_dados["UTM_MEDIUM"] == "pago"]

# # Criar um dicion√°rio para armazenar os resultados
# resultados = []

# # Iterar sobre cada an√∫ncio
# for anuncio in df_ptrafego_dados["UTM_TERM"].unique():
#     # Filtrar os leads daquele an√∫ncio
#     df_anuncio = df_ptrafego_dados[df_ptrafego_dados["UTM_TERM"] == anuncio]
    
#     # Criar a tabela de captura (matriz renda x patrim√¥nio)
#     tabela_captura = df_anuncio.pivot_table(
#         index="RENDA MENSAL",
#         columns="PATRIMONIO",
#         values="EMAIL",
#         aggfunc="count",
#         fill_value=0
#     )

#     # Garantir que as faixas est√£o na ordem correta
#     tabela_captura = tabela_captura.reindex(index=proxy_vendas.index, columns=proxy_vendas.columns, fill_value=0)

#     # Multiplicar pela proxy de vendas para obter as vendas previstas
#     tabela_vendas_previstas = tabela_captura * proxy_vendas

#     # Calcular o total de leads capturados e o total de vendas previstas
#     total_leads = tabela_captura.sum().sum()
#     total_vendas_previstas = tabela_vendas_previstas.sum().sum()

#     # Calcular a taxa de convers√£o prevista
#     taxa_conversao_prevista = (total_vendas_previstas / total_leads) if total_leads > 0 else 0

#     # Armazenar os resultados
#     resultados.append([anuncio, total_leads, taxa_conversao_prevista])

# # Criar um DataFrame final com os resultados
# df_resultado = pd.DataFrame(resultados, columns=["Nome do An√∫ncio", "Captura", "Taxa de Convers√£o Prevista"])

# # Ordenar do maior para o menor n√∫mero de capturas
# df_resultado = df_resultado.sort_values(by="Captura", ascending=False)

# #Formatar a coluna de taxa de convers√£o para exibi√ß√£o melhorada
# df_resultado["Taxa de Convers√£o Prevista"] = df_resultado["Taxa de Convers√£o Prevista"] * 100

# # Exibir o resultado
# import streamlit as st
# st.write("### üìä Previs√£o de Convers√£o por An√∫ncio")
# st.dataframe(df_resultado)

# # Criar gr√°fico de dispers√£o usando Plotly sem r√≥tulos sobre os pontos e sem varia√ß√£o de tamanho
# fig = px.scatter(
#     df_resultado[df_resultado["Captura"] >= threshold],
#     y="Taxa de Convers√£o Prevista",
#     x="Captura",
#     color="Taxa de Convers√£o Prevista",
#     hover_name="Nome do An√∫ncio",
#     title="üéØ Leads Capturados vs. Taxa de Convers√£o Prevista",
#     labels={"Captura": "Leads Capturados", "Taxa de Convers√£o Prevista": "Taxa de Convers√£o Prevista (%)"},
# )

# # Ajustar layout: definir tamanho fixo dos pontos e remover r√≥tulos sobre os pontos
# fig.update_traces(marker=dict(size=8))  # Define tamanho fixo dos pontos

# fig.update_layout(
#     xaxis=dict(title="Leads Capturados"),
#     yaxis=dict(title="Taxa de Convers√£o Prevista (%)"),
#     showlegend=False
# )

# # Exibir gr√°fico no Streamlit
# st.plotly_chart(fig, use_container_width=True)


# # Filtrar apenas os an√∫ncios que capturaram mais de 'threshold' leads
# predictions = df_resultado[df_resultado["Captura"] >= threshold].copy()
# real = ranking_leads[ranking_leads["Leads_Capturados"] >= threshold].copy()

# # Ajustar √≠ndices para facilitar a compara√ß√£o
# predictions.set_index("Nome do An√∫ncio", inplace=True)
# real.set_index("An√∫ncio", inplace=True)

# # Garantir que os DataFrames tenham apenas an√∫ncios em comum
# anuncios_comuns = predictions.index.intersection(real.index)

# # Filtrar os DataFrames com base nos an√∫ncios comuns
# predictions = predictions.loc[anuncios_comuns]
# real = real.loc[anuncios_comuns]

# # Calcular erro absoluto m√©dio (MAE)
# mae = (real["Taxa de Convers√£o"] - predictions["Taxa de Convers√£o Prevista"]).abs().mean()
# mae


